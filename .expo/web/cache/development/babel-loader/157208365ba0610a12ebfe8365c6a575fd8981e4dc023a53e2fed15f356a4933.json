{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { CodedError, EventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport { AppleAuthenticationOperation } from \"./AppleAuthentication.types\";\nimport ExpoAppleAuthentication from \"./ExpoAppleAuthentication\";\nexport function isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    if (!ExpoAppleAuthentication || !ExpoAppleAuthentication.isAvailableAsync) {\n      return false;\n    }\n    return ExpoAppleAuthentication.isAvailableAsync();\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}\nexport function signInAsync(_x) {\n  return _signInAsync.apply(this, arguments);\n}\nfunction _signInAsync() {\n  _signInAsync = _asyncToGenerator(function* (options) {\n    if (!ExpoAppleAuthentication || !ExpoAppleAuthentication.requestAsync) {\n      throw new UnavailabilityError('expo-apple-authentication', 'signInAsync');\n    }\n    var requestOptions = _objectSpread(_objectSpread({}, options), {}, {\n      requestedOperation: AppleAuthenticationOperation.LOGIN\n    });\n    var credential = yield ExpoAppleAuthentication.requestAsync(requestOptions);\n    if (!credential.authorizationCode || !credential.identityToken || !credential.user) {\n      throw new CodedError('ERR_REQUEST_FAILED', 'The credential returned by `signInAsync` is missing one or more required fields.');\n    }\n    return credential;\n  });\n  return _signInAsync.apply(this, arguments);\n}\nexport function refreshAsync(_x2) {\n  return _refreshAsync.apply(this, arguments);\n}\nfunction _refreshAsync() {\n  _refreshAsync = _asyncToGenerator(function* (options) {\n    if (!ExpoAppleAuthentication || !ExpoAppleAuthentication.requestAsync) {\n      throw new UnavailabilityError('expo-apple-authentication', 'refreshAsync');\n    }\n    var requestOptions = _objectSpread(_objectSpread({}, options), {}, {\n      requestedOperation: AppleAuthenticationOperation.REFRESH\n    });\n    var credential = yield ExpoAppleAuthentication.requestAsync(requestOptions);\n    if (!credential.authorizationCode || !credential.identityToken || !credential.user) {\n      throw new CodedError('ERR_REQUEST_FAILED', 'The credential returned by `refreshAsync` is missing one or more required fields.');\n    }\n    return credential;\n  });\n  return _refreshAsync.apply(this, arguments);\n}\nexport function signOutAsync(_x3) {\n  return _signOutAsync.apply(this, arguments);\n}\nfunction _signOutAsync() {\n  _signOutAsync = _asyncToGenerator(function* (options) {\n    if (!ExpoAppleAuthentication || !ExpoAppleAuthentication.requestAsync) {\n      throw new UnavailabilityError('expo-apple-authentication', 'signOutAsync');\n    }\n    var requestOptions = _objectSpread(_objectSpread({}, options), {}, {\n      requestedOperation: AppleAuthenticationOperation.LOGOUT\n    });\n    return ExpoAppleAuthentication.requestAsync(requestOptions);\n  });\n  return _signOutAsync.apply(this, arguments);\n}\nexport function getCredentialStateAsync(_x4) {\n  return _getCredentialStateAsync.apply(this, arguments);\n}\nfunction _getCredentialStateAsync() {\n  _getCredentialStateAsync = _asyncToGenerator(function* (user) {\n    if (!ExpoAppleAuthentication || !ExpoAppleAuthentication.getCredentialStateAsync) {\n      throw new UnavailabilityError('expo-apple-authentication', 'getCredentialStateAsync');\n    }\n    return ExpoAppleAuthentication.getCredentialStateAsync(user);\n  });\n  return _getCredentialStateAsync.apply(this, arguments);\n}\nvar ExpoAppleAuthenticationEventEmitter = new EventEmitter(ExpoAppleAuthentication);\nexport function addRevokeListener(listener) {\n  return ExpoAppleAuthenticationEventEmitter.addListener('Expo.appleIdCredentialRevoked', listener);\n}","map":{"version":3,"names":["CodedError","EventEmitter","UnavailabilityError","AppleAuthenticationOperation","ExpoAppleAuthentication","isAvailableAsync","_isAvailableAsync","apply","arguments","_asyncToGenerator","signInAsync","_x","_signInAsync","options","requestAsync","requestOptions","_objectSpread","requestedOperation","LOGIN","credential","authorizationCode","identityToken","user","refreshAsync","_x2","_refreshAsync","REFRESH","signOutAsync","_x3","_signOutAsync","LOGOUT","getCredentialStateAsync","_x4","_getCredentialStateAsync","ExpoAppleAuthenticationEventEmitter","addRevokeListener","listener","addListener"],"sources":["/home/khanhuy/Documents/js/apple-auth/node_modules/expo-apple-authentication/src/AppleAuthentication.ts"],"sourcesContent":["import { CodedError, EventEmitter, Subscription, UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  AppleAuthenticationCredential,\n  AppleAuthenticationCredentialState,\n  AppleAuthenticationOperation,\n  AppleAuthenticationRefreshOptions,\n  AppleAuthenticationSignInOptions,\n  AppleAuthenticationSignOutOptions,\n} from './AppleAuthentication.types';\nimport ExpoAppleAuthentication from './ExpoAppleAuthentication';\n\n// @needsAudit\n/**\n * Determine if the current device's operating system supports Apple authentication.\n * @return A promise that fulfills with `true` if the system supports Apple authentication, and `false` otherwise.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  if (!ExpoAppleAuthentication || !ExpoAppleAuthentication.isAvailableAsync) {\n    return false;\n  }\n  return ExpoAppleAuthentication.isAvailableAsync();\n}\n\n// @needsAudit\n/**\n * Sends a request to the operating system to initiate the Apple authentication flow, which will\n * present a modal to the user over your app and allow them to sign in.\n *\n * You can request access to the user's full name and email address in this method, which allows you\n * to personalize your UI for signed in users. However, users can deny access to either or both\n * of these options at runtime.\n *\n * Additionally, you will only receive Apple Authentication Credentials the first time users sign\n * into your app, so you must store it for later use. It's best to store this information either\n * server-side, or using [SecureStore](./securestore), so that the data persists across app installs.\n * You can use [`AppleAuthenticationCredential.user`](#appleauthenticationcredential) to identify\n * the user, since this remains the same for apps released by the same developer.\n *\n * @param options An optional [`AppleAuthenticationSignInOptions`](#appleauthenticationsigninoptions) object\n * @return A promise that fulfills with an [`AppleAuthenticationCredential`](#appleauthenticationcredential)\n * object after a successful authentication, and rejects with `ERR_REQUEST_CANCELED` if the user cancels the\n * sign-in operation.\n */\nexport async function signInAsync(\n  options?: AppleAuthenticationSignInOptions\n): Promise<AppleAuthenticationCredential> {\n  if (!ExpoAppleAuthentication || !ExpoAppleAuthentication.requestAsync) {\n    throw new UnavailabilityError('expo-apple-authentication', 'signInAsync');\n  }\n  const requestOptions = {\n    ...options,\n    requestedOperation: AppleAuthenticationOperation.LOGIN,\n  };\n  const credential = await ExpoAppleAuthentication.requestAsync(requestOptions);\n  if (!credential.authorizationCode || !credential.identityToken || !credential.user) {\n    throw new CodedError(\n      'ERR_REQUEST_FAILED',\n      'The credential returned by `signInAsync` is missing one or more required fields.'\n    );\n  }\n  return credential;\n}\n\n// @needsAudit\n/**\n * An operation that refreshes the logged-in userâ€™s credentials.\n * Calling this method will show the sign in modal before actually refreshing the user credentials.\n *\n * @param options An [`AppleAuthenticationRefreshOptions`](#appleauthenticationrefreshoptions) object\n * @returns A promise that fulfills with an [`AppleAuthenticationCredential`](#appleauthenticationcredential)\n * object after a successful authentication, and rejects with `ERR_REQUEST_CANCELED` if the user cancels the\n * refresh operation.\n */\nexport async function refreshAsync(\n  options: AppleAuthenticationRefreshOptions\n): Promise<AppleAuthenticationCredential> {\n  if (!ExpoAppleAuthentication || !ExpoAppleAuthentication.requestAsync) {\n    throw new UnavailabilityError('expo-apple-authentication', 'refreshAsync');\n  }\n  const requestOptions = {\n    ...options,\n    requestedOperation: AppleAuthenticationOperation.REFRESH,\n  };\n  const credential = await ExpoAppleAuthentication.requestAsync(requestOptions);\n  if (!credential.authorizationCode || !credential.identityToken || !credential.user) {\n    throw new CodedError(\n      'ERR_REQUEST_FAILED',\n      'The credential returned by `refreshAsync` is missing one or more required fields.'\n    );\n  }\n  return credential;\n}\n\n// @needsAudit\n/**\n * An operation that ends the authenticated session.\n * Calling this method will show the sign in modal before actually signing the user out.\n *\n * It is not recommended to use this method to sign out the user as it works counterintuitively.\n * Instead of using this method it is recommended to simply clear all the user's data collected\n * from using [`signInAsync`](./#signinasync) or [`refreshAsync`](./#refreshasync) methods.\n *\n * @param options An [`AppleAuthenticationSignOutOptions`](#appleauthenticationsignoutoptions) object\n * @returns A promise that fulfills with an [`AppleAuthenticationCredential`](#appleauthenticationcredential)\n * object after a successful authentication, and rejects with `ERR_REQUEST_CANCELED` if the user cancels the\n * sign-out operation.\n */\nexport async function signOutAsync(\n  options: AppleAuthenticationSignOutOptions\n): Promise<AppleAuthenticationCredential> {\n  if (!ExpoAppleAuthentication || !ExpoAppleAuthentication.requestAsync) {\n    throw new UnavailabilityError('expo-apple-authentication', 'signOutAsync');\n  }\n  const requestOptions = {\n    ...options,\n    requestedOperation: AppleAuthenticationOperation.LOGOUT,\n  };\n  return ExpoAppleAuthentication.requestAsync(requestOptions);\n}\n\n// @needsAudit\n/**\n * Queries the current state of a user credential, to determine if it is still valid or if it has been revoked.\n * > **Note:** This method must be tested on a real device. On the iOS simulator it always throws an error.\n *\n * @param user The unique identifier for the user whose credential state you'd like to check.\n * This should come from the user field of an [`AppleAuthenticationCredential`](#appleauthenticationcredentialstate) object.\n * @return A promise that fulfills with an [`AppleAuthenticationCredentialState`](#appleauthenticationcredentialstate)\n * value depending on the state of the credential.\n */\nexport async function getCredentialStateAsync(\n  user: string\n): Promise<AppleAuthenticationCredentialState> {\n  if (!ExpoAppleAuthentication || !ExpoAppleAuthentication.getCredentialStateAsync) {\n    throw new UnavailabilityError('expo-apple-authentication', 'getCredentialStateAsync');\n  }\n  return ExpoAppleAuthentication.getCredentialStateAsync(user);\n}\n\nconst ExpoAppleAuthenticationEventEmitter = new EventEmitter(ExpoAppleAuthentication);\n\n// @docsMissing\nexport function addRevokeListener(listener: () => void): Subscription {\n  return ExpoAppleAuthenticationEventEmitter.addListener('Expo.appleIdCredentialRevoked', listener);\n}\n\nexport { Subscription };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}